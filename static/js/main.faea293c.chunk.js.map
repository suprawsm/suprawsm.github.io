{"version":3,"sources":["Row.js","LinkRow.js","Title.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","className","title","date","desc","LinkRow","href","url","Title","About","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAceA,MAXf,SAAaC,GACT,OACI,yBAAKC,UAAU,OACX,4BAAKD,EAAME,OACX,uBAAGD,UAAU,QAAQD,EAAMG,MAC3B,uBAAGF,UAAU,QAAQD,EAAMI,MAC3B,+BCIGC,MAVf,SAAiBL,GACb,OACI,yBAAKC,UAAU,OACX,4BAAKD,EAAME,OACX,uBAAGD,UAAU,QAAO,uBAAGK,KAAMN,EAAMO,KAAMP,EAAMG,OAC/C,+BCIGK,MATf,SAAeR,GACX,OACI,yBAAKC,UAAU,aACX,4BAAKD,EAAME,OACX,+BC0BGO,MA3Bf,SAAeT,GACX,OACI,yBAAKC,UAAU,SACX,kJAA6G,uBAAGK,KAAK,yBAAR,YAA7G,KACA,uBAAGL,UAAU,iBAAb,UACA,6BAASA,UAAU,WACf,6BAAK,uBAAGA,UAAU,QAAb,sBAET,6BAASA,UAAU,QACf,kBAAC,EAAD,CAAOC,MAAM,eACb,kBAAC,EAAD,CAAKA,MAAM,UAAUC,KAAK,0BAAqBC,KAAK,uDACpD,kBAAC,EAAD,CAAKF,MAAM,UAAUC,KAAK,2BAAsBC,KAAK,yCACrD,kBAAC,EAAD,CAAKF,MAAM,UAAUC,KAAK,2BAAsBC,KAAK,8EACrD,kBAAC,EAAD,CAAKF,MAAM,UAAUC,KAAK,2BAAsBC,KAAK,+DAGzD,6BAASH,UAAU,SACf,kBAAC,EAAD,CAAOC,MAAM,sBACb,kBAAC,EAAD,CAASK,IAAI,sCAAsCL,MAAM,UAAUC,KAAK,kBACxE,kBAAC,EAAD,CAASI,IAAI,yBAAyBL,MAAM,QAAQC,KAAK,uBCR1DO,MAXf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,iCACA,8BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,OCCrBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.faea293c.chunk.js","sourcesContent":["import React from \"react\";\nimport './App.css';\n\nfunction Row(props) {\n    return(\n        <div className=\"row\">\n            <h1>{props.title}</h1>\n            <p className=\"date\">{props.date}</p>\n            <p className=\"desc\">{props.desc}</p>\n            <hr />\n        </div>\n    )\n}\n\nexport default Row;","import React from \"react\";\nimport './App.css';\n\nfunction LinkRow(props) {\n    return(\n        <div className=\"row\">\n            <h1>{props.title}</h1>\n            <p className=\"date\"><a href={props.url}>{props.date}</a></p>\n            <hr />\n        </div>\n    )\n}\n\nexport default LinkRow;","import React from \"react\";\nimport './App.css';\n\nfunction Title(props) {\n    return(\n        <div className=\"title-box\">\n            <h2>{props.title}</h2>\n            <hr />\n        </div>\n    )\n}\n\nexport default Title;","import React from \"react\";\nimport Row from './Row.js'\nimport LinkRow from './LinkRow.js'\nimport Title from './Title.js'\nimport './App.css';\n\nfunction About(props) {\n    return(\n        <div className=\"intro\">\n            <p>I’m Farbod — a multidisciplinary designer loving the intersection of design & tech. Currently designing at<a href=\"http://spotify.design\"> Spotify</a>.</p>\n            <p className=\"smiley--small\">☻</p>\n            <section className=\"contact\">\n                <div><p className=\"name\">Farbod Faramarzi</p></div>\n            </section>\n            <section className=\"work\">\n                <Title title=\"Experience\"/>\n                <Row title=\"Spotify\" date=\"May 2020 → present\" desc=\"Mobile Design Systems and holistic user experience\" />\n                <Row title=\"Spotify\" date=\"Jan 2019 → May 2020\" desc=\"Designing Desktop App and Web Player\" />\n                <Row title=\"Spotify\" date=\"May 2017 → Jan 2019\" desc=\"Designing for big screens, game consoles, speakers, and smart appliances.\" />\n                <Row title=\"Viaplay\" date=\"Oct 2014 → May 2017\" desc=\"Designing for big screens, game consoles, and iOS devices\" />\n            </section>\n\n            <section className=\"links\">\n                <Title title=\"Find me elsewhere\"/>\n                <LinkRow url=\"http://www.twitter.com/fabbylicious\" title=\"Twitter\" date=\"@fabbylicious\"/>\n                <LinkRow url=\"mailto:hello@fabbe.lol\" title=\"Email\" date=\"hello@fabbe.lol\"/>\n            </section>\n        </div>\n\n        \n    )\n}\n\nexport default About;","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from './About.js'; \nimport './App.css';\n\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <header></header>\n      <main>\n        <Route exact path=\"/\" component={About}/>\n      </main>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}